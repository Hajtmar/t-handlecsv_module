
\setuppapersize[A4,portrait][A4,portrait]

\setuplayout[width=middle, height=middle, backspace=1in, cutspace=1in, margins=0pt]

\input about_cells_contents-buffers



\starttext
\title{Disclosure of the data in the cells of CSV table}

%\startcolumns[n=2, distance=2mm, tolerance=stretch, balance=yes]
After loading CSV table into module (when use \type{\opencsvfile} command) the 
CSV data are put into the library macros for practical using. Datas in macros 
are available to ConTeXt and can be browsed “manually“ or by using the 
standard cycles or predefined cycles of library.

Processing method and creating of usable macros depends on whether it's header 
of CSV table or not. If the first row of the table contains the so-called 
header of CSV file, then column names will be used as names of macros. In 
addition, macros are created next macros, whose names match the names of cells 
in a spreadsheet (eg. Excel). 

The contents of individual cells can be obtained using macro 
\type{\csvcell[<}{\it column}\type{>,<}{\it row}\type{>]} or using any macros 
that refer to a specific column, while line number of table is determined 
using a pointer (linepointer). Let me show the following simple example.


To begin, suppose that we will process the CSV table 
{\ss myfirstcsvexamplefile.csv}, the column delimiter is comma (\type{,}) and in 
first line is header with these items: {\tt "first_name"}, {\tt "last_name"}, 
{\tt "company_name"}, {\tt "address"}, {\tt "city"}, {\tt "county"}, 
{\tt "state"}, {\tt "zip"}, {\tt "phone1"}, {\tt "phone2"}, {\tt "email"}, 
{\tt "web"}.

%\stopcolumns


\title{Examples of usage}

\subject{Contents cells via coordinates}

We can getting cell contents through coordinates of cells in the CSV file.

\typeexampleandresult[example1-cell coordinates]{9pt}

\page

\subject{Contents cells via Excel notation}

And here is notation like Excel example:

\typeexampleandresult[example2-cell coordinates]{9pt}


\page

\subject{Contents cells via "header like" notation}

And here are "header like" variations of notation example: 

\typeexampleandresult[example3-cell coordinates]{9pt}

You see, that \TeX\ problematic character (not allowed in macro names) are replaced with {\ttbf x} character.\crlf


\typeexampleandresult[example4-cell coordinates]{9pt}

Numbers are not allowed in \TeX\ macros, therefore numbers are changed into 
roman numeral in \TeX\ macro name. 
Furthermore, it is seen that if the column name does not match the proper column name,
than result of macro is {\em undefined}. Later, we will see why 
names of columns are allowed in other variants (some characters are changed).


\blank[big]

\subject{Macro \type{\csvcell} and pass parameters using macros}

Here are some examples using of macro \type{\csvcell}.


\typeexampleandresult[example5-cell coordinates]{9pt}


\page


\subject{Using \type{\csvcell} macro in cycles}


Example of list of five rows of \type{first_name} column by use \type{\dorecurse} loop:

\typeexampleandresult[example6-cell coordinates]{9pt}


\blank[big]

Example of list of all header:

\typeexampleandresult[example7-cell coordinates]{9pt}

\page

Example list of all CSV table by use dorecurse cycle:

\typeexampleandresult[example8-cell coordinates]{10pt}

% Change to A4 portrait
\page
\setuppapersize[A4,portrait][A4,portrait]



\def\foller{Foller}
\edef\jm{\csvcell['last_name',5]}

CSVCELL \jm: TEST: \ifx\jm\foller TRUE\else FALSE \fi

\def\JMENO[#1]{\csvcell['last_name',#1]}
\edef\TESTJMENO{\JMENO[5]}

JMENO: \TESTJMENO\ TEST: \ifx\TESTJMENO\foller TRUE\else FALSE \fi


\ifx\csvcell['last_name',5]\foller ANO1\else NE1 \fi



\def\JMENO#1{\collastxname[#1]}

\type{\JMENO}: \JMENO


\type{\dosinglegroupempty\JMENO{5} Text}: \dosinglegroupempty\JMENO{5} Text


\type{\dosinglegroupempty\JMENO Text}: \dosinglegroupempty\JMENO Text


\type{\dosinglegroupempty\JMENO{5} Text}: \dosinglegroupempty\collastxname{5} Text



\def\JM#1{\csvcell['last_name',{#1}]}

\dosinglegroupempty\JM{5}

\dosinglegroupempty\JM{7}

\dosinglegroupempty\JM{}

\csvcell['last_name',7]



-----------------------------

\setheader
\setsep{,}
\usehooks % it is necessary turn on using hooks while process CSV file 
\opencsvfile{../lisajdb1a.csv}

%-----------------------------------
% http://source.contextgarden.net/syst-aux.mkiv
% OK OK OK
\def\mari{Marijana}
\edef\jm{\csvcell['Jmeno',5]}

CSVCELL \jm: TEST: \ifx\jm\mari TRUE\else FALSE \fi

\def\JMENO[#1]{\csvcell['Jmeno',#1]}
\edef\TESTJMENO{\JMENO[5]}

JMENO: \TESTJMENO\ TEST: \ifx\TESTJMENO\mari TRUE\else FALSE \fi

%-----------------------------------


\ifx\csvcell['Jmeno',5]\mari ANO1\else NE1 \fi



\def\JMENO#1{\colJmeno[#1]}

\type{\JMENO}: \JMENO


\type{\dosinglegroupempty\JMENO{5} Text}: \dosinglegroupempty\JMENO{5} Text


\type{\dosinglegroupempty\JMENO Text}: \dosinglegroupempty\JMENO Text


\type{\dosinglegroupempty\JMENO{5} Text}: \dosinglegroupempty\colJmeno{5} Text





\def\JM#1{\csvcell['Jmeno',{#1}]}

\dosinglegroupempty\JM{5}

\dosinglegroupempty\JM{7}

\dosinglegroupempty\JM{}

\csvcell['Jmeno',7]


%-----------------------------------

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

\setheader
\setsep{,}
\usehooks % it is necessary turn on using hooks while process CSV file 
\opencsvfile{../lisajdb1a.csv}


\startbuffer[testxxxcellmacros]

Syntax 1: previous:\previouscell[4]: -- current:\currentcell[4]: -- next:\nextcell[4]:

Syntax 2: previous:\previouscell['D']: -- current:\currentcell['D']: -- next:\nextcell['D']:

Syntax 3: previous:\previouscell['Jmeno']: -- current:\currentcell['Jmeno']: -- next:\nextcell['Jmeno']:

Syntax 4: previous:\previouscell['cD']: -- current:\currentcell['cD']: -- next:\nextcell['cD']:

Syntax 5: previous:\previouscell['cIV']: -- current:\currentcell['cIV']: -- next:\nextcell['cIV']:

xxxxx 

\stopbuffer


\dorecurse{\numrows}{\getbuffer[testxxxcellmacros]\nextrow\crlf}



sssssssssssssssssss

\input tufte















\stoptext

 


%-----------------------------------
% http://source.contextgarden.net/syst-aux.mkiv
% OK OK OK
\def\foller{Foller}
\edef\jm{\csvcell['last_name',5]}

CSVCELL \jm: TEST: \ifx\jm\foller TRUE\else FALSE \fi


\def\JMENO#1{\csvcell['last_name',#1] } 

\JMENO 

\edef\TESTJMENO{\JMENO[5]}

JMENO: \TESTJMENO\ TEST: \ifx\TESTJMENO\foller TRUE\else FALSE \fi

%-----------------------------------


\ifx\csvcell['last_name',5]\foller ANO1\else NE1 \fi



% \def\JMENO#1{\collastxname[#1]}
% 
% \type{\JMENO}: \JMENO
% 
% 
% \type{\dosinglegroupempty\JMENO{5} Text}: \dosinglegroupempty\JMENO{5} Text
% 
% 
% \type{\dosinglegroupempty\JMENO Text}: \dosinglegroupempty\JMENO Text


% \def\JM#1{\csvcell['last_name',#1]}
% 
% \dosinglegroupempty\JM{5}
% 
% \dosinglegroupempty\JM{7}
% 
% \dosinglegroupempty\JM
% 
% \JM{}
% 
% 
% \csvcell['last_name',7]


sssssssssssssssssss



